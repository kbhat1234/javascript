#  git version
git --version
'''
Output:
git version 2.26.0.windows.1
'''

# setting username
git config --global user.name "kbhat1234"
git config user.name
'''
Output:
kbhat1234
'''

# setting user email id
git config --global user.email "karthikbhat@live.com"
git config user.email
'''
Output:
karthikbhat@live.com
'''

# avoid merge commits for pull
git config --global branch.autosetuprebase always
git config branch.autosetuprebase
'''
Output:
always
'''

# color highlighting
git config --global color.ui true
git config --global color.status auto
git config --global color.branch auto

git config color.ui
'''
Output:
true
'''

git config color.status
'''
Output:
auto
'''

git config color.branch
'''
Output:
auto
'''

# Setting default editor
git config --global core.editor vim
git config core.editor
'''
Output:
vim
'''

# setting default merge tool
git config --global merge.tool vimdiff
git config merge.tool
'''
Output:
vimdiff
'''

# listing git config settings
git config --list
'''
Output:
diff.astextplain.textconv=astextplain
filter.lfs.clean=git-lfs clean -- %f
filter.lfs.smudge=git-lfs smudge -- %f
filter.lfs.process=git-lfs filter-process
filter.lfs.required=true
http.sslbackend=openssl
http.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt
core.autocrlf=true
core.fscache=true
core.symlinks=false
core.editor=nano.exe
credential.helper=manager
user.name=kbhat1234
user.email=karthikbhat@live.com
color.ui=true
color.status=auto
color.branch=auto
core.editor=vim
core.repositoryformatversion=0
core.filemode=false
core.bare=false
core.logallrefupdates=true
core.symlinks=false
core.ignorecase=true
remote.origin.url=https://github.com/kbhat1234/python_3.8.git
remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
branch.local.remote=origin
branch.local.merge=refs/heads/local
branch.master.remote=origin
branch.master.merge=refs/heads/master
'''

# git initialization
git init
'''
Output:
Reinitialized existing Git repository in C:/Users/karth/PycharmProjects/PythonPackage/Programs/.git/
'''

# link the local repository to an empty GitHub repository
# git remote add origin [url]
git remote add origin https://github.com/kbhat1234/python_3.8.git
git config remote.origin.url
'''
Output:
remote.origin.url=https://github.com/kbhat1234/python_3.8.git
'''
git config remote.origin.fetch
'''
Output:
+refs/heads/*:refs/remotes/origin/*
'''

# link the local repository to an empty GitHub repository
git remote add destination https://github.com/kbhat1234/shell-script.git
git config remote.destination.url
git config remote.destination.fetch
'''
Output:
https://github.com/kbhat1234/shell-script.git
+refs/heads/*:refs/remotes/destination/*
'''

# view the current remotes
git remote -v
'''
Output:
destination     https://github.com/kbhat1234/shell-script.git (fetch)
destination     https://github.com/kbhat1234/shell-script.git (push)
origin  https://github.com/kbhat1234/python_3.8.git (fetch)
origin  https://github.com/kbhat1234/python_3.8.git (push)
''''

# Remove remote
git remote rm destination
git remote -v
'''
Output:
origin  https://github.com/kbhat1234/python_3.8.git (fetch)
origin  https://github.com/kbhat1234/python_3.8.git (push)
'''

# git clone [url]
git clone git https://github.com/kbhat1234/RESTAPI.git
'''
Output:
Cloning into 'RESTAPI'...
remote: Enumerating objects: 479, done.
remote: Total 479 (delta 0), reused 0 (delta 0), pack-reused 479
Receiving objects: 100% (479/479), 77.35 KiB | 286.00 KiB/s, done.
Resolving deltas: 100% (194/194), done.
'''

vi a1.txt # modify some contents to the already synced file
touch a2.txt # add a new file on the local working directory

# status to know which branch, which files are modified, new, deleted, etc.
git status
'''
Output:
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   a1.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        a2.txt

no changes added to commit (use "git add" and/or "git commit -a")
'''

# to know code branches on your local working directory
git branch
'''
Output:
  local1.0
* master
'''

# create a new branch with name
# git branch [branch_name]
git branch version2.0

git branch
'''
Output:
  local1.0
* master
  version2.0
'''

# switching between one branch of version of code to another
# git checkout [branch_name]
git checkout version2.0
'''
Output:
Switched to branch 'version2.0'
M       a1.txt  # M followed with file name a1.txt is modified, already synced with git repo before
'''

# before deleting the branch version2.0
git branch
'''
Output:
  master
* version2.0
'''

# delete the created branch from local
# git branch -D [branch_name]
git branch -D version2.0
'''
Output:
Deleted branch version2.0 (was 0ffd94f).
'''

# after delete of branch
git branch
'''
Output:
* master
'''

'''merging 2 branches locally and pushing to remote repositories
git merge [branch1] [branch2]
checkout to local repository branch "local"
make some changes to gitcommands.txt
commit the changes to local
then push to remote repository branch "origin/local"
checkout to master, merge with local and then push to "origin/master"
'''

git status
'''
Output:
On branch local
Your branch is up to date with 'origin/local'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   gitcommands.txt

no changes added to commit (use "git add" and/or "git commit -a")
'''

git commit -a -m "adding some more commands to gitcommands.txt"
git push origin local
'''
changes pushed to remote repository origin/local
'''
git checkout master
git merge master local



